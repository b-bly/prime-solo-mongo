//1 Create a collection named orders.
db.createCollection('orders');
//2Insert at least 3 documents that represent orders. IMPORTANT: See section below for fields. Order dates should be: 2017-02-03, 2017-04-04, 2017-01-02

> db.orders.insert({ orderDate: new Date("2017-02-03"), orderTotal: 170.54, lineItems: [ { unitPrice: 14.99, quantity: 2, productName: "Notebooks" } ] });
WriteResult({ "nInserted" : 1 })
> db.orders.insert({ orderDate: new Date("2017-04-04"), orderTotal: 389.39, lineItems: [ { unitPrice: 49.22, quantity: 2, productName: "geese" } ] });
WriteResult({ "nInserted" : 1 })
> db.orders.insert({ orderDate: new Date("2017-01-02"), orderTotal: 33.33, lineItems: [ { unitPrice: 11.11, quantity: 7, productName: "kittens" } ] });
WriteResult({ "nInserted" : 1 })
> 


//3 Find all orders and make them look pretty.

 db.orders.find().pretty();
{
	"_id" : ObjectId("599ef57a0f4826af4e2dde52"),
	"orderDate" : ISODate("2017-02-03T00:00:00Z"),
	"orderTotal" : 170.54,
	"lineItems" : [
		{
			"unitPrice" : 14.99,
			"quantity" : 2,
			"productName" : "Notebooks"
		}
	]
}
{
	"_id" : ObjectId("599ef5dc0f4826af4e2dde53"),
	"orderDate" : ISODate("2017-04-04T00:00:00Z"),
	"orderTotal" : 389.39,
	"lineItems" : [
		{
			"unitPrice" : 49.22,
			"quantity" : 2,
			"productName" : "geese"
		}
	]
}
{
	"_id" : ObjectId("599ef6440f4826af4e2dde54"),
	"orderDate" : ISODate("2017-01-02T00:00:00Z"),
	"orderTotal" : 33.33,
	"lineItems" : [
		{
			"unitPrice" : 11.11,
			"quantity" : 7,
			"productName" : "kittens"
		}
	]
}
> 

//4 Find all orders with an orderDate that is after 1/31/2017.

 db.orders.find({"orderDate" : { $gt : new Date("2017-31-01")}})
{ "_id" : ObjectId("599ef57a0f4826af4e2dde52"), "orderDate" : ISODate("2017-02-03T00:00:00Z"), "orderTotal" : 170.54, "lineItems" : [ { "unitPrice" : 14.99, "quantity" : 2, "productName" : "Notebooks" } ] }
{ "_id" : ObjectId("599ef5dc0f4826af4e2dde53"), "orderDate" : ISODate("2017-04-04T00:00:00Z"), "orderTotal" : 389.39, "lineItems" : [ { "unitPrice" : 49.22, "quantity" : 2, "productName" : "geese" } ] }
{ "_id" : ObjectId("599ef6440f4826af4e2dde54"), "orderDate" : ISODate("2017-01-02T00:00:00Z"), "orderTotal" : 33.33, "lineItems" : [ { "unitPrice" : 11.11, "quantity" : 7, "productName" : "kittens" } ] }
> 

//5Change the orderTotal from 2/3/2017 to 63 dollars (you do NOT have to ensure the lineItems' unitPrice * quantity add up to the orderTotal)

> db.orders.update({ _id: ObjectId("599ef57a0f4826af4e2dde52")}, {$set: { orderTotal: 63.00 } } )

//6 Add another lineItem to the order from 4/4/2017

db.orders.update({ _id : ObjectId("599ef5dc0f4826af4e2dde53") }, { $push: { "unitPrice" : 22.22, "quantity" : 2, "productName" : "weatherBlade" } } )

//7 Change the first lineItem in the order from 1/2/2017 to be for 2 'transistor 
// radio's

db.orders.update({ _id: ObjectId("599ef6440f4826af4e2dde54")}, { $set: 
{
     "lineItems.0.quantity" : 7, 
    "lineItems.0.productName": "transistor radio"
}
})


//8 Find orders with lineItems that have a quantity that is less than 10, but greater than 2. You will have to research $and
